<?xml version="1.0"?>
<ruleset name="Terasology PMD ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
      Terasology PMD ruleset
  </description>
  <exclude-pattern>.*/org.terasology.protobuf/.*</exclude-pattern>
<!-- inline <rule ref="rulesets/java/basic.xml"/>  -->
  <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" />
  <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
  <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" />
  <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"  />
  <rule ref="category/java/errorprone.xml/BrokenNullCheck" />
  <rule ref="category/java/errorprone.xml/CheckSkipResult" />
  <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />
  <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices" />
  <rule ref="category/java/errorprone.xml/JumbledIncrementer" />
  <rule ref="category/java/errorprone.xml/MisplacedNullCheck" />
  <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" />
  <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" />
  <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" />

  <rule ref="category/java/multithreading.xml/AvoidThreadGroup" />
  <rule ref="category/java/multithreading.xml/DontCallThreadRun" />
  <rule ref="category/java/multithreading.xml/DoubleCheckedLocking" />

  <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP" />
  <rule ref="category/java/bestpractices.xml/CheckResultSet" />
  <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation" />

  <rule ref="category/java/codestyle.xml/ExtendsObject" />
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />

  <rule ref="category/java/performance.xml/BigIntegerInstantiation" />

  <rule ref="category/java/design.xml/CollapsibleIfStatements" />
  <rule ref="category/java/design.xml/SimplifiedTernary" />
<!--  inline <rule ref="rulesets/java/braces.xml"/>-->
  <rule ref="category/java/codestyle.xml/ControlStatementBraces" />
<!-- inline  <rule ref="rulesets/java/clone.xml"/>-->
  <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic" />
  <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
  <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />
  <rule ref="category/java/errorprone.xml/ProperCloneImplementation" />
<!-- inline <rule ref="rulesets/java/finalizers.xml"/>-->
  <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />
  <rule ref="category/java/errorprone.xml/EmptyFinalizer" />
  <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOverloaded" />
  <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected" />
<!-- inline <rule ref="rulesets/java/logging-java.xml">-->
<!--      <exclude name="GuardLogStatementJavaUtil"/>-->
<!--  </rule>-->
  <rule ref="category/java/errorprone.xml/InvalidLogMessageFormat" />
  <rule ref="category/java/errorprone.xml/MoreThanOneLogger" />
  <rule ref="category/java/errorprone.xml/ProperLogger" />

  <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" />
  <!-- GuardLogStatementJavaUtil has been merged into GuardLogStatement -->
  <rule ref="category/java/bestpractices.xml/GuardLogStatement" name="GuardLogStatementJavaUtil" />
  <rule ref="category/java/bestpractices.xml/SystemPrintln" />
<!-- inline <rule ref="rulesets/java/migrating.xml"/>-->
  <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" />
  <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" />

  <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />
  <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnitUseExpected" />
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />

<!-- inline <rule ref="rulesets/java/sunsecure.xml"/>-->
  <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly" />
  <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray" />
<!-- inline <rule ref="rulesets/java/unusedcode.xml"/>-->
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter" />
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" />
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField" />
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" />
</ruleset>
